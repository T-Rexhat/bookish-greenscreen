(*
But first-class fn are useful anywhere for any kind of data
- can pass several fn as arguments
- can put fn in data struct
- can return fn as results
- can write higher-order fn that traverse your own data struct

useful whenever you want to abstract over "what to compute with"
- no new lang features

*)

(*returning a fn*)


fun double_or_triple f = (* (int->bool) -> (int -> int)    *)
    if f 7
    then fn x => 2 * x
    else
	fn x => 3 * x

val double = double_or_triple (fn x => x -3 = 4) (*this would return a fn*)
val nine = double_or_triple (fn x => x = 42)	(*this would return a fn*)		      
